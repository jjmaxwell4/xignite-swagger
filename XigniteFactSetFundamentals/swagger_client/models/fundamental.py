# coding: utf-8

"""
    XigniteFactSetFundamentals

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Fundamental(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'outcome': 'str',
        'message': 'str',
        'type': 'str',
        'report_type': 'str',
        'is_restated': 'bool',
        'value': 'str',
        '_date': 'str',
        'last_updated': 'str',
        'unit': 'str'
    }

    attribute_map = {
        'outcome': 'Outcome',
        'message': 'Message',
        'type': 'Type',
        'report_type': 'ReportType',
        'is_restated': 'IsRestated',
        'value': 'Value',
        '_date': 'Date',
        'last_updated': 'LastUpdated',
        'unit': 'Unit'
    }

    def __init__(self, outcome=None, message=None, type=None, report_type=None, is_restated=None, value=None, _date=None, last_updated=None, unit=None):  # noqa: E501
        """Fundamental - a model defined in Swagger"""  # noqa: E501
        self._outcome = None
        self._message = None
        self._type = None
        self._report_type = None
        self._is_restated = None
        self._value = None
        self.__date = None
        self._last_updated = None
        self._unit = None
        self.discriminator = None
        if outcome is not None:
            self.outcome = outcome
        if message is not None:
            self.message = message
        if type is not None:
            self.type = type
        if report_type is not None:
            self.report_type = report_type
        if is_restated is not None:
            self.is_restated = is_restated
        if value is not None:
            self.value = value
        if _date is not None:
            self._date = _date
        if last_updated is not None:
            self.last_updated = last_updated
        if unit is not None:
            self.unit = unit

    @property
    def outcome(self):
        """Gets the outcome of this Fundamental.  # noqa: E501


        :return: The outcome of this Fundamental.  # noqa: E501
        :rtype: str
        """
        return self._outcome

    @outcome.setter
    def outcome(self, outcome):
        """Sets the outcome of this Fundamental.


        :param outcome: The outcome of this Fundamental.  # noqa: E501
        :type: str
        """

        self._outcome = outcome

    @property
    def message(self):
        """Gets the message of this Fundamental.  # noqa: E501


        :return: The message of this Fundamental.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Fundamental.


        :param message: The message of this Fundamental.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def type(self):
        """Gets the type of this Fundamental.  # noqa: E501


        :return: The type of this Fundamental.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Fundamental.


        :param type: The type of this Fundamental.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def report_type(self):
        """Gets the report_type of this Fundamental.  # noqa: E501


        :return: The report_type of this Fundamental.  # noqa: E501
        :rtype: str
        """
        return self._report_type

    @report_type.setter
    def report_type(self, report_type):
        """Sets the report_type of this Fundamental.


        :param report_type: The report_type of this Fundamental.  # noqa: E501
        :type: str
        """

        self._report_type = report_type

    @property
    def is_restated(self):
        """Gets the is_restated of this Fundamental.  # noqa: E501


        :return: The is_restated of this Fundamental.  # noqa: E501
        :rtype: bool
        """
        return self._is_restated

    @is_restated.setter
    def is_restated(self, is_restated):
        """Sets the is_restated of this Fundamental.


        :param is_restated: The is_restated of this Fundamental.  # noqa: E501
        :type: bool
        """

        self._is_restated = is_restated

    @property
    def value(self):
        """Gets the value of this Fundamental.  # noqa: E501


        :return: The value of this Fundamental.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Fundamental.


        :param value: The value of this Fundamental.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def _date(self):
        """Gets the _date of this Fundamental.  # noqa: E501


        :return: The _date of this Fundamental.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Fundamental.


        :param _date: The _date of this Fundamental.  # noqa: E501
        :type: str
        """

        self.__date = _date

    @property
    def last_updated(self):
        """Gets the last_updated of this Fundamental.  # noqa: E501


        :return: The last_updated of this Fundamental.  # noqa: E501
        :rtype: str
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this Fundamental.


        :param last_updated: The last_updated of this Fundamental.  # noqa: E501
        :type: str
        """

        self._last_updated = last_updated

    @property
    def unit(self):
        """Gets the unit of this Fundamental.  # noqa: E501


        :return: The unit of this Fundamental.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this Fundamental.


        :param unit: The unit of this Fundamental.  # noqa: E501
        :type: str
        """

        self._unit = unit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Fundamental, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Fundamental):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
