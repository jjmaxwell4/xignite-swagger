# coding: utf-8

"""
    XigniteFactSetFundamentals

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FinancialStatement(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'statement_type': 'AllOfFinancialStatementStatementType',
        'report_type': 'str',
        'statement_template': 'AllOfFinancialStatementStatementTemplate',
        'fiscal_period_end_date': 'str',
        'is_restated': 'bool',
        'currency': 'str',
        'items': 'list[Item]'
    }

    attribute_map = {
        'statement_type': 'StatementType',
        'report_type': 'ReportType',
        'statement_template': 'StatementTemplate',
        'fiscal_period_end_date': 'FiscalPeriodEndDate',
        'is_restated': 'IsRestated',
        'currency': 'Currency',
        'items': 'Items'
    }

    def __init__(self, statement_type=None, report_type=None, statement_template=None, fiscal_period_end_date=None, is_restated=None, currency=None, items=None):  # noqa: E501
        """FinancialStatement - a model defined in Swagger"""  # noqa: E501
        self._statement_type = None
        self._report_type = None
        self._statement_template = None
        self._fiscal_period_end_date = None
        self._is_restated = None
        self._currency = None
        self._items = None
        self.discriminator = None
        if statement_type is not None:
            self.statement_type = statement_type
        if report_type is not None:
            self.report_type = report_type
        if statement_template is not None:
            self.statement_template = statement_template
        if fiscal_period_end_date is not None:
            self.fiscal_period_end_date = fiscal_period_end_date
        if is_restated is not None:
            self.is_restated = is_restated
        if currency is not None:
            self.currency = currency
        if items is not None:
            self.items = items

    @property
    def statement_type(self):
        """Gets the statement_type of this FinancialStatement.  # noqa: E501


        :return: The statement_type of this FinancialStatement.  # noqa: E501
        :rtype: AllOfFinancialStatementStatementType
        """
        return self._statement_type

    @statement_type.setter
    def statement_type(self, statement_type):
        """Sets the statement_type of this FinancialStatement.


        :param statement_type: The statement_type of this FinancialStatement.  # noqa: E501
        :type: AllOfFinancialStatementStatementType
        """

        self._statement_type = statement_type

    @property
    def report_type(self):
        """Gets the report_type of this FinancialStatement.  # noqa: E501


        :return: The report_type of this FinancialStatement.  # noqa: E501
        :rtype: str
        """
        return self._report_type

    @report_type.setter
    def report_type(self, report_type):
        """Sets the report_type of this FinancialStatement.


        :param report_type: The report_type of this FinancialStatement.  # noqa: E501
        :type: str
        """

        self._report_type = report_type

    @property
    def statement_template(self):
        """Gets the statement_template of this FinancialStatement.  # noqa: E501


        :return: The statement_template of this FinancialStatement.  # noqa: E501
        :rtype: AllOfFinancialStatementStatementTemplate
        """
        return self._statement_template

    @statement_template.setter
    def statement_template(self, statement_template):
        """Sets the statement_template of this FinancialStatement.


        :param statement_template: The statement_template of this FinancialStatement.  # noqa: E501
        :type: AllOfFinancialStatementStatementTemplate
        """

        self._statement_template = statement_template

    @property
    def fiscal_period_end_date(self):
        """Gets the fiscal_period_end_date of this FinancialStatement.  # noqa: E501


        :return: The fiscal_period_end_date of this FinancialStatement.  # noqa: E501
        :rtype: str
        """
        return self._fiscal_period_end_date

    @fiscal_period_end_date.setter
    def fiscal_period_end_date(self, fiscal_period_end_date):
        """Sets the fiscal_period_end_date of this FinancialStatement.


        :param fiscal_period_end_date: The fiscal_period_end_date of this FinancialStatement.  # noqa: E501
        :type: str
        """

        self._fiscal_period_end_date = fiscal_period_end_date

    @property
    def is_restated(self):
        """Gets the is_restated of this FinancialStatement.  # noqa: E501


        :return: The is_restated of this FinancialStatement.  # noqa: E501
        :rtype: bool
        """
        return self._is_restated

    @is_restated.setter
    def is_restated(self, is_restated):
        """Sets the is_restated of this FinancialStatement.


        :param is_restated: The is_restated of this FinancialStatement.  # noqa: E501
        :type: bool
        """

        self._is_restated = is_restated

    @property
    def currency(self):
        """Gets the currency of this FinancialStatement.  # noqa: E501


        :return: The currency of this FinancialStatement.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this FinancialStatement.


        :param currency: The currency of this FinancialStatement.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def items(self):
        """Gets the items of this FinancialStatement.  # noqa: E501


        :return: The items of this FinancialStatement.  # noqa: E501
        :rtype: list[Item]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this FinancialStatement.


        :param items: The items of this FinancialStatement.  # noqa: E501
        :type: list[Item]
        """

        self._items = items

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FinancialStatement, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FinancialStatement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
