# coding: utf-8

"""
    XigniteFactSetFundamentals

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Company(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'symbol': 'str',
        'cik': 'str',
        'cusip': 'str',
        'sedol': 'str',
        'isin': 'str',
        'fact_set_security_id': 'str',
        'fact_set_issuer_id': 'str',
        'valoren': 'str',
        'market': 'str',
        'market_identification_code': 'str',
        'primary_market': 'str',
        'primary_market_identification_code': 'str',
        'sector': 'str',
        'industry': 'str',
        'statement_template': 'str'
    }

    attribute_map = {
        'name': 'Name',
        'symbol': 'Symbol',
        'cik': 'CIK',
        'cusip': 'CUSIP',
        'sedol': 'SEDOL',
        'isin': 'ISIN',
        'fact_set_security_id': 'FactSetSecurityID',
        'fact_set_issuer_id': 'FactSetIssuerID',
        'valoren': 'Valoren',
        'market': 'Market',
        'market_identification_code': 'MarketIdentificationCode',
        'primary_market': 'PrimaryMarket',
        'primary_market_identification_code': 'PrimaryMarketIdentificationCode',
        'sector': 'Sector',
        'industry': 'Industry',
        'statement_template': 'StatementTemplate'
    }

    def __init__(self, name=None, symbol=None, cik=None, cusip=None, sedol=None, isin=None, fact_set_security_id=None, fact_set_issuer_id=None, valoren=None, market=None, market_identification_code=None, primary_market=None, primary_market_identification_code=None, sector=None, industry=None, statement_template=None):  # noqa: E501
        """Company - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._symbol = None
        self._cik = None
        self._cusip = None
        self._sedol = None
        self._isin = None
        self._fact_set_security_id = None
        self._fact_set_issuer_id = None
        self._valoren = None
        self._market = None
        self._market_identification_code = None
        self._primary_market = None
        self._primary_market_identification_code = None
        self._sector = None
        self._industry = None
        self._statement_template = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if symbol is not None:
            self.symbol = symbol
        if cik is not None:
            self.cik = cik
        if cusip is not None:
            self.cusip = cusip
        if sedol is not None:
            self.sedol = sedol
        if isin is not None:
            self.isin = isin
        if fact_set_security_id is not None:
            self.fact_set_security_id = fact_set_security_id
        if fact_set_issuer_id is not None:
            self.fact_set_issuer_id = fact_set_issuer_id
        if valoren is not None:
            self.valoren = valoren
        if market is not None:
            self.market = market
        if market_identification_code is not None:
            self.market_identification_code = market_identification_code
        if primary_market is not None:
            self.primary_market = primary_market
        if primary_market_identification_code is not None:
            self.primary_market_identification_code = primary_market_identification_code
        if sector is not None:
            self.sector = sector
        if industry is not None:
            self.industry = industry
        if statement_template is not None:
            self.statement_template = statement_template

    @property
    def name(self):
        """Gets the name of this Company.  # noqa: E501


        :return: The name of this Company.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Company.


        :param name: The name of this Company.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def symbol(self):
        """Gets the symbol of this Company.  # noqa: E501


        :return: The symbol of this Company.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this Company.


        :param symbol: The symbol of this Company.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def cik(self):
        """Gets the cik of this Company.  # noqa: E501


        :return: The cik of this Company.  # noqa: E501
        :rtype: str
        """
        return self._cik

    @cik.setter
    def cik(self, cik):
        """Sets the cik of this Company.


        :param cik: The cik of this Company.  # noqa: E501
        :type: str
        """

        self._cik = cik

    @property
    def cusip(self):
        """Gets the cusip of this Company.  # noqa: E501


        :return: The cusip of this Company.  # noqa: E501
        :rtype: str
        """
        return self._cusip

    @cusip.setter
    def cusip(self, cusip):
        """Sets the cusip of this Company.


        :param cusip: The cusip of this Company.  # noqa: E501
        :type: str
        """

        self._cusip = cusip

    @property
    def sedol(self):
        """Gets the sedol of this Company.  # noqa: E501


        :return: The sedol of this Company.  # noqa: E501
        :rtype: str
        """
        return self._sedol

    @sedol.setter
    def sedol(self, sedol):
        """Sets the sedol of this Company.


        :param sedol: The sedol of this Company.  # noqa: E501
        :type: str
        """

        self._sedol = sedol

    @property
    def isin(self):
        """Gets the isin of this Company.  # noqa: E501


        :return: The isin of this Company.  # noqa: E501
        :rtype: str
        """
        return self._isin

    @isin.setter
    def isin(self, isin):
        """Sets the isin of this Company.


        :param isin: The isin of this Company.  # noqa: E501
        :type: str
        """

        self._isin = isin

    @property
    def fact_set_security_id(self):
        """Gets the fact_set_security_id of this Company.  # noqa: E501


        :return: The fact_set_security_id of this Company.  # noqa: E501
        :rtype: str
        """
        return self._fact_set_security_id

    @fact_set_security_id.setter
    def fact_set_security_id(self, fact_set_security_id):
        """Sets the fact_set_security_id of this Company.


        :param fact_set_security_id: The fact_set_security_id of this Company.  # noqa: E501
        :type: str
        """

        self._fact_set_security_id = fact_set_security_id

    @property
    def fact_set_issuer_id(self):
        """Gets the fact_set_issuer_id of this Company.  # noqa: E501


        :return: The fact_set_issuer_id of this Company.  # noqa: E501
        :rtype: str
        """
        return self._fact_set_issuer_id

    @fact_set_issuer_id.setter
    def fact_set_issuer_id(self, fact_set_issuer_id):
        """Sets the fact_set_issuer_id of this Company.


        :param fact_set_issuer_id: The fact_set_issuer_id of this Company.  # noqa: E501
        :type: str
        """

        self._fact_set_issuer_id = fact_set_issuer_id

    @property
    def valoren(self):
        """Gets the valoren of this Company.  # noqa: E501


        :return: The valoren of this Company.  # noqa: E501
        :rtype: str
        """
        return self._valoren

    @valoren.setter
    def valoren(self, valoren):
        """Sets the valoren of this Company.


        :param valoren: The valoren of this Company.  # noqa: E501
        :type: str
        """

        self._valoren = valoren

    @property
    def market(self):
        """Gets the market of this Company.  # noqa: E501


        :return: The market of this Company.  # noqa: E501
        :rtype: str
        """
        return self._market

    @market.setter
    def market(self, market):
        """Sets the market of this Company.


        :param market: The market of this Company.  # noqa: E501
        :type: str
        """

        self._market = market

    @property
    def market_identification_code(self):
        """Gets the market_identification_code of this Company.  # noqa: E501


        :return: The market_identification_code of this Company.  # noqa: E501
        :rtype: str
        """
        return self._market_identification_code

    @market_identification_code.setter
    def market_identification_code(self, market_identification_code):
        """Sets the market_identification_code of this Company.


        :param market_identification_code: The market_identification_code of this Company.  # noqa: E501
        :type: str
        """

        self._market_identification_code = market_identification_code

    @property
    def primary_market(self):
        """Gets the primary_market of this Company.  # noqa: E501


        :return: The primary_market of this Company.  # noqa: E501
        :rtype: str
        """
        return self._primary_market

    @primary_market.setter
    def primary_market(self, primary_market):
        """Sets the primary_market of this Company.


        :param primary_market: The primary_market of this Company.  # noqa: E501
        :type: str
        """

        self._primary_market = primary_market

    @property
    def primary_market_identification_code(self):
        """Gets the primary_market_identification_code of this Company.  # noqa: E501


        :return: The primary_market_identification_code of this Company.  # noqa: E501
        :rtype: str
        """
        return self._primary_market_identification_code

    @primary_market_identification_code.setter
    def primary_market_identification_code(self, primary_market_identification_code):
        """Sets the primary_market_identification_code of this Company.


        :param primary_market_identification_code: The primary_market_identification_code of this Company.  # noqa: E501
        :type: str
        """

        self._primary_market_identification_code = primary_market_identification_code

    @property
    def sector(self):
        """Gets the sector of this Company.  # noqa: E501


        :return: The sector of this Company.  # noqa: E501
        :rtype: str
        """
        return self._sector

    @sector.setter
    def sector(self, sector):
        """Sets the sector of this Company.


        :param sector: The sector of this Company.  # noqa: E501
        :type: str
        """

        self._sector = sector

    @property
    def industry(self):
        """Gets the industry of this Company.  # noqa: E501


        :return: The industry of this Company.  # noqa: E501
        :rtype: str
        """
        return self._industry

    @industry.setter
    def industry(self, industry):
        """Sets the industry of this Company.


        :param industry: The industry of this Company.  # noqa: E501
        :type: str
        """

        self._industry = industry

    @property
    def statement_template(self):
        """Gets the statement_template of this Company.  # noqa: E501


        :return: The statement_template of this Company.  # noqa: E501
        :rtype: str
        """
        return self._statement_template

    @statement_template.setter
    def statement_template(self, statement_template):
        """Sets the statement_template of this Company.


        :param statement_template: The statement_template of this Company.  # noqa: E501
        :type: str
        """

        self._statement_template = statement_template

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Company, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Company):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
