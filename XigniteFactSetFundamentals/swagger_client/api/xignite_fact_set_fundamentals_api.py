# coding: utf-8

"""
    XigniteFactSetFundamentals

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class XigniteFactSetFundamentalsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def x_fact_set_fundamentals_get_balance_sheets_get(self, **kwargs):  # noqa: E501
        """x_fact_set_fundamentals_get_balance_sheets_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.x_fact_set_fundamentals_get_balance_sheets_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identifiers:
        :param str identifier_type:
        :param str as_of_date:
        :param str report_type:
        :param str exclude_restated:
        :param str updated_since:
        :return: list[CompanyBalanceSheet]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.x_fact_set_fundamentals_get_balance_sheets_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.x_fact_set_fundamentals_get_balance_sheets_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def x_fact_set_fundamentals_get_balance_sheets_get_with_http_info(self, **kwargs):  # noqa: E501
        """x_fact_set_fundamentals_get_balance_sheets_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.x_fact_set_fundamentals_get_balance_sheets_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identifiers:
        :param str identifier_type:
        :param str as_of_date:
        :param str report_type:
        :param str exclude_restated:
        :param str updated_since:
        :return: list[CompanyBalanceSheet]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifiers', 'identifier_type', 'as_of_date', 'report_type', 'exclude_restated', 'updated_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method x_fact_set_fundamentals_get_balance_sheets_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'identifiers' in params:
            query_params.append(('Identifiers', params['identifiers']))  # noqa: E501
        if 'identifier_type' in params:
            query_params.append(('IdentifierType', params['identifier_type']))  # noqa: E501
        if 'as_of_date' in params:
            query_params.append(('AsOfDate', params['as_of_date']))  # noqa: E501
        if 'report_type' in params:
            query_params.append(('ReportType', params['report_type']))  # noqa: E501
        if 'exclude_restated' in params:
            query_params.append(('ExcludeRestated', params['exclude_restated']))  # noqa: E501
        if 'updated_since' in params:
            query_params.append(('UpdatedSince', params['updated_since']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/xFactSetFundamentals/GetBalanceSheets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CompanyBalanceSheet]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def x_fact_set_fundamentals_get_cash_flow_statements_get(self, **kwargs):  # noqa: E501
        """x_fact_set_fundamentals_get_cash_flow_statements_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.x_fact_set_fundamentals_get_cash_flow_statements_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identifiers:
        :param str identifier_type:
        :param str as_of_date:
        :param str report_type:
        :param str exclude_restated:
        :param str updated_since:
        :return: list[CompanyCashFlowStatement]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.x_fact_set_fundamentals_get_cash_flow_statements_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.x_fact_set_fundamentals_get_cash_flow_statements_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def x_fact_set_fundamentals_get_cash_flow_statements_get_with_http_info(self, **kwargs):  # noqa: E501
        """x_fact_set_fundamentals_get_cash_flow_statements_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.x_fact_set_fundamentals_get_cash_flow_statements_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identifiers:
        :param str identifier_type:
        :param str as_of_date:
        :param str report_type:
        :param str exclude_restated:
        :param str updated_since:
        :return: list[CompanyCashFlowStatement]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifiers', 'identifier_type', 'as_of_date', 'report_type', 'exclude_restated', 'updated_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method x_fact_set_fundamentals_get_cash_flow_statements_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'identifiers' in params:
            query_params.append(('Identifiers', params['identifiers']))  # noqa: E501
        if 'identifier_type' in params:
            query_params.append(('IdentifierType', params['identifier_type']))  # noqa: E501
        if 'as_of_date' in params:
            query_params.append(('AsOfDate', params['as_of_date']))  # noqa: E501
        if 'report_type' in params:
            query_params.append(('ReportType', params['report_type']))  # noqa: E501
        if 'exclude_restated' in params:
            query_params.append(('ExcludeRestated', params['exclude_restated']))  # noqa: E501
        if 'updated_since' in params:
            query_params.append(('UpdatedSince', params['updated_since']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/xFactSetFundamentals/GetCashFlowStatements', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CompanyCashFlowStatement]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def x_fact_set_fundamentals_get_financial_statements_get(self, **kwargs):  # noqa: E501
        """x_fact_set_fundamentals_get_financial_statements_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.x_fact_set_fundamentals_get_financial_statements_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identifiers:
        :param str identifier_type:
        :param str statement_types:
        :param str as_of_date:
        :param str report_type:
        :param str exclude_restated:
        :return: list[CompanyFinancialStatements]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.x_fact_set_fundamentals_get_financial_statements_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.x_fact_set_fundamentals_get_financial_statements_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def x_fact_set_fundamentals_get_financial_statements_get_with_http_info(self, **kwargs):  # noqa: E501
        """x_fact_set_fundamentals_get_financial_statements_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.x_fact_set_fundamentals_get_financial_statements_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identifiers:
        :param str identifier_type:
        :param str statement_types:
        :param str as_of_date:
        :param str report_type:
        :param str exclude_restated:
        :return: list[CompanyFinancialStatements]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifiers', 'identifier_type', 'statement_types', 'as_of_date', 'report_type', 'exclude_restated']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method x_fact_set_fundamentals_get_financial_statements_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'identifiers' in params:
            query_params.append(('Identifiers', params['identifiers']))  # noqa: E501
        if 'identifier_type' in params:
            query_params.append(('IdentifierType', params['identifier_type']))  # noqa: E501
        if 'statement_types' in params:
            query_params.append(('StatementTypes', params['statement_types']))  # noqa: E501
        if 'as_of_date' in params:
            query_params.append(('AsOfDate', params['as_of_date']))  # noqa: E501
        if 'report_type' in params:
            query_params.append(('ReportType', params['report_type']))  # noqa: E501
        if 'exclude_restated' in params:
            query_params.append(('ExcludeRestated', params['exclude_restated']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/xFactSetFundamentals/GetFinancialStatements', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CompanyFinancialStatements]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def x_fact_set_fundamentals_get_fundamentals_daily_range_get(self, **kwargs):  # noqa: E501
        """x_fact_set_fundamentals_get_fundamentals_daily_range_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.x_fact_set_fundamentals_get_fundamentals_daily_range_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identifiers:
        :param str identifier_type:
        :param str fundamental_types:
        :param str start_date:
        :param str end_date:
        :param str report_type:
        :param str exclude_restated:
        :param str updated_since:
        :return: list[CompanyFundamentals]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.x_fact_set_fundamentals_get_fundamentals_daily_range_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.x_fact_set_fundamentals_get_fundamentals_daily_range_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def x_fact_set_fundamentals_get_fundamentals_daily_range_get_with_http_info(self, **kwargs):  # noqa: E501
        """x_fact_set_fundamentals_get_fundamentals_daily_range_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.x_fact_set_fundamentals_get_fundamentals_daily_range_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identifiers:
        :param str identifier_type:
        :param str fundamental_types:
        :param str start_date:
        :param str end_date:
        :param str report_type:
        :param str exclude_restated:
        :param str updated_since:
        :return: list[CompanyFundamentals]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifiers', 'identifier_type', 'fundamental_types', 'start_date', 'end_date', 'report_type', 'exclude_restated', 'updated_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method x_fact_set_fundamentals_get_fundamentals_daily_range_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'identifiers' in params:
            query_params.append(('Identifiers', params['identifiers']))  # noqa: E501
        if 'identifier_type' in params:
            query_params.append(('IdentifierType', params['identifier_type']))  # noqa: E501
        if 'fundamental_types' in params:
            query_params.append(('FundamentalTypes', params['fundamental_types']))  # noqa: E501
        if 'start_date' in params:
            query_params.append(('StartDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('EndDate', params['end_date']))  # noqa: E501
        if 'report_type' in params:
            query_params.append(('ReportType', params['report_type']))  # noqa: E501
        if 'exclude_restated' in params:
            query_params.append(('ExcludeRestated', params['exclude_restated']))  # noqa: E501
        if 'updated_since' in params:
            query_params.append(('UpdatedSince', params['updated_since']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/xFactSetFundamentals/GetFundamentalsDailyRange', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CompanyFundamentals]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def x_fact_set_fundamentals_get_fundamentals_fiscal_range_get(self, **kwargs):  # noqa: E501
        """x_fact_set_fundamentals_get_fundamentals_fiscal_range_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.x_fact_set_fundamentals_get_fundamentals_fiscal_range_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identifiers:
        :param str identifier_type:
        :param str fundamental_types:
        :param str start_date:
        :param str end_date:
        :param str report_type:
        :param str exclude_restated:
        :param str updated_since:
        :return: list[CompanyFundamentals]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.x_fact_set_fundamentals_get_fundamentals_fiscal_range_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.x_fact_set_fundamentals_get_fundamentals_fiscal_range_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def x_fact_set_fundamentals_get_fundamentals_fiscal_range_get_with_http_info(self, **kwargs):  # noqa: E501
        """x_fact_set_fundamentals_get_fundamentals_fiscal_range_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.x_fact_set_fundamentals_get_fundamentals_fiscal_range_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identifiers:
        :param str identifier_type:
        :param str fundamental_types:
        :param str start_date:
        :param str end_date:
        :param str report_type:
        :param str exclude_restated:
        :param str updated_since:
        :return: list[CompanyFundamentals]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifiers', 'identifier_type', 'fundamental_types', 'start_date', 'end_date', 'report_type', 'exclude_restated', 'updated_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method x_fact_set_fundamentals_get_fundamentals_fiscal_range_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'identifiers' in params:
            query_params.append(('Identifiers', params['identifiers']))  # noqa: E501
        if 'identifier_type' in params:
            query_params.append(('IdentifierType', params['identifier_type']))  # noqa: E501
        if 'fundamental_types' in params:
            query_params.append(('FundamentalTypes', params['fundamental_types']))  # noqa: E501
        if 'start_date' in params:
            query_params.append(('StartDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('EndDate', params['end_date']))  # noqa: E501
        if 'report_type' in params:
            query_params.append(('ReportType', params['report_type']))  # noqa: E501
        if 'exclude_restated' in params:
            query_params.append(('ExcludeRestated', params['exclude_restated']))  # noqa: E501
        if 'updated_since' in params:
            query_params.append(('UpdatedSince', params['updated_since']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/xFactSetFundamentals/GetFundamentalsFiscalRange', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CompanyFundamentals]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def x_fact_set_fundamentals_get_fundamentals_get(self, **kwargs):  # noqa: E501
        """x_fact_set_fundamentals_get_fundamentals_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.x_fact_set_fundamentals_get_fundamentals_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identifiers:
        :param str identifier_type:
        :param str fundamental_types:
        :param str report_type:
        :param str exclude_restated:
        :param str as_of_date:
        :param str updated_since:
        :return: list[CompanyFundamentals]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.x_fact_set_fundamentals_get_fundamentals_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.x_fact_set_fundamentals_get_fundamentals_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def x_fact_set_fundamentals_get_fundamentals_get_with_http_info(self, **kwargs):  # noqa: E501
        """x_fact_set_fundamentals_get_fundamentals_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.x_fact_set_fundamentals_get_fundamentals_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identifiers:
        :param str identifier_type:
        :param str fundamental_types:
        :param str report_type:
        :param str exclude_restated:
        :param str as_of_date:
        :param str updated_since:
        :return: list[CompanyFundamentals]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifiers', 'identifier_type', 'fundamental_types', 'report_type', 'exclude_restated', 'as_of_date', 'updated_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method x_fact_set_fundamentals_get_fundamentals_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'identifiers' in params:
            query_params.append(('Identifiers', params['identifiers']))  # noqa: E501
        if 'identifier_type' in params:
            query_params.append(('IdentifierType', params['identifier_type']))  # noqa: E501
        if 'fundamental_types' in params:
            query_params.append(('FundamentalTypes', params['fundamental_types']))  # noqa: E501
        if 'report_type' in params:
            query_params.append(('ReportType', params['report_type']))  # noqa: E501
        if 'exclude_restated' in params:
            query_params.append(('ExcludeRestated', params['exclude_restated']))  # noqa: E501
        if 'as_of_date' in params:
            query_params.append(('AsOfDate', params['as_of_date']))  # noqa: E501
        if 'updated_since' in params:
            query_params.append(('UpdatedSince', params['updated_since']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/xFactSetFundamentals/GetFundamentals', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CompanyFundamentals]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def x_fact_set_fundamentals_get_income_statements_get(self, **kwargs):  # noqa: E501
        """x_fact_set_fundamentals_get_income_statements_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.x_fact_set_fundamentals_get_income_statements_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identifiers:
        :param str identifier_type:
        :param str as_of_date:
        :param str report_type:
        :param str exclude_restated:
        :param str updated_since:
        :return: list[CompanyIncomeStatement]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.x_fact_set_fundamentals_get_income_statements_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.x_fact_set_fundamentals_get_income_statements_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def x_fact_set_fundamentals_get_income_statements_get_with_http_info(self, **kwargs):  # noqa: E501
        """x_fact_set_fundamentals_get_income_statements_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.x_fact_set_fundamentals_get_income_statements_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identifiers:
        :param str identifier_type:
        :param str as_of_date:
        :param str report_type:
        :param str exclude_restated:
        :param str updated_since:
        :return: list[CompanyIncomeStatement]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifiers', 'identifier_type', 'as_of_date', 'report_type', 'exclude_restated', 'updated_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method x_fact_set_fundamentals_get_income_statements_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'identifiers' in params:
            query_params.append(('Identifiers', params['identifiers']))  # noqa: E501
        if 'identifier_type' in params:
            query_params.append(('IdentifierType', params['identifier_type']))  # noqa: E501
        if 'as_of_date' in params:
            query_params.append(('AsOfDate', params['as_of_date']))  # noqa: E501
        if 'report_type' in params:
            query_params.append(('ReportType', params['report_type']))  # noqa: E501
        if 'exclude_restated' in params:
            query_params.append(('ExcludeRestated', params['exclude_restated']))  # noqa: E501
        if 'updated_since' in params:
            query_params.append(('UpdatedSince', params['updated_since']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/xFactSetFundamentals/GetIncomeStatements', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CompanyIncomeStatement]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def x_fact_set_fundamentals_get_latest_fundamentals_get(self, **kwargs):  # noqa: E501
        """x_fact_set_fundamentals_get_latest_fundamentals_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.x_fact_set_fundamentals_get_latest_fundamentals_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identifiers:
        :param str identifier_type:
        :param str fundamental_types:
        :param str updated_since:
        :return: list[CompanyFundamentals]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.x_fact_set_fundamentals_get_latest_fundamentals_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.x_fact_set_fundamentals_get_latest_fundamentals_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def x_fact_set_fundamentals_get_latest_fundamentals_get_with_http_info(self, **kwargs):  # noqa: E501
        """x_fact_set_fundamentals_get_latest_fundamentals_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.x_fact_set_fundamentals_get_latest_fundamentals_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identifiers:
        :param str identifier_type:
        :param str fundamental_types:
        :param str updated_since:
        :return: list[CompanyFundamentals]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifiers', 'identifier_type', 'fundamental_types', 'updated_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method x_fact_set_fundamentals_get_latest_fundamentals_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'identifiers' in params:
            query_params.append(('Identifiers', params['identifiers']))  # noqa: E501
        if 'identifier_type' in params:
            query_params.append(('IdentifierType', params['identifier_type']))  # noqa: E501
        if 'fundamental_types' in params:
            query_params.append(('FundamentalTypes', params['fundamental_types']))  # noqa: E501
        if 'updated_since' in params:
            query_params.append(('UpdatedSince', params['updated_since']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/xFactSetFundamentals/GetLatestFundamentals', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CompanyFundamentals]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def x_fact_set_fundamentals_list_companies_get(self, **kwargs):  # noqa: E501
        """x_fact_set_fundamentals_list_companies_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.x_fact_set_fundamentals_list_companies_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str market_identification_code:
        :param str start_symbol:
        :param str end_symbol:
        :return: CompanyList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.x_fact_set_fundamentals_list_companies_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.x_fact_set_fundamentals_list_companies_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def x_fact_set_fundamentals_list_companies_get_with_http_info(self, **kwargs):  # noqa: E501
        """x_fact_set_fundamentals_list_companies_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.x_fact_set_fundamentals_list_companies_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str market_identification_code:
        :param str start_symbol:
        :param str end_symbol:
        :return: CompanyList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['market_identification_code', 'start_symbol', 'end_symbol']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method x_fact_set_fundamentals_list_companies_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'market_identification_code' in params:
            query_params.append(('MarketIdentificationCode', params['market_identification_code']))  # noqa: E501
        if 'start_symbol' in params:
            query_params.append(('StartSymbol', params['start_symbol']))  # noqa: E501
        if 'end_symbol' in params:
            query_params.append(('EndSymbol', params['end_symbol']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/xFactSetFundamentals/ListCompanies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CompanyList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def x_fact_set_fundamentals_list_exchanges_by_region_get(self, **kwargs):  # noqa: E501
        """x_fact_set_fundamentals_list_exchanges_by_region_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.x_fact_set_fundamentals_list_exchanges_by_region_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str regions:
        :return: ExchangeList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.x_fact_set_fundamentals_list_exchanges_by_region_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.x_fact_set_fundamentals_list_exchanges_by_region_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def x_fact_set_fundamentals_list_exchanges_by_region_get_with_http_info(self, **kwargs):  # noqa: E501
        """x_fact_set_fundamentals_list_exchanges_by_region_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.x_fact_set_fundamentals_list_exchanges_by_region_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str regions:
        :return: ExchangeList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['regions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method x_fact_set_fundamentals_list_exchanges_by_region_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'regions' in params:
            query_params.append(('Regions', params['regions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/xFactSetFundamentals/ListExchangesByRegion', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ExchangeList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def x_fact_set_fundamentals_list_exchanges_get(self, **kwargs):  # noqa: E501
        """x_fact_set_fundamentals_list_exchanges_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.x_fact_set_fundamentals_list_exchanges_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ExchangeList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.x_fact_set_fundamentals_list_exchanges_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.x_fact_set_fundamentals_list_exchanges_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def x_fact_set_fundamentals_list_exchanges_get_with_http_info(self, **kwargs):  # noqa: E501
        """x_fact_set_fundamentals_list_exchanges_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.x_fact_set_fundamentals_list_exchanges_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ExchangeList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method x_fact_set_fundamentals_list_exchanges_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/xFactSetFundamentals/ListExchanges', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ExchangeList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def x_fact_set_fundamentals_list_fundamentals_by_data_group_get(self, **kwargs):  # noqa: E501
        """x_fact_set_fundamentals_list_fundamentals_by_data_group_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.x_fact_set_fundamentals_list_fundamentals_by_data_group_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_groups:
        :return: FundamentalDescriptionList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.x_fact_set_fundamentals_list_fundamentals_by_data_group_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.x_fact_set_fundamentals_list_fundamentals_by_data_group_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def x_fact_set_fundamentals_list_fundamentals_by_data_group_get_with_http_info(self, **kwargs):  # noqa: E501
        """x_fact_set_fundamentals_list_fundamentals_by_data_group_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.x_fact_set_fundamentals_list_fundamentals_by_data_group_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_groups:
        :return: FundamentalDescriptionList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_groups']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method x_fact_set_fundamentals_list_fundamentals_by_data_group_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'data_groups' in params:
            query_params.append(('DataGroups', params['data_groups']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/xFactSetFundamentals/ListFundamentalsByDataGroup', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FundamentalDescriptionList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def x_fact_set_fundamentals_list_fundamentals_get(self, **kwargs):  # noqa: E501
        """x_fact_set_fundamentals_list_fundamentals_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.x_fact_set_fundamentals_list_fundamentals_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: FundamentalDescriptionList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.x_fact_set_fundamentals_list_fundamentals_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.x_fact_set_fundamentals_list_fundamentals_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def x_fact_set_fundamentals_list_fundamentals_get_with_http_info(self, **kwargs):  # noqa: E501
        """x_fact_set_fundamentals_list_fundamentals_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.x_fact_set_fundamentals_list_fundamentals_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: FundamentalDescriptionList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method x_fact_set_fundamentals_list_fundamentals_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/xFactSetFundamentals/ListFundamentals', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FundamentalDescriptionList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def x_fact_set_fundamentals_list_sectors_and_industries_get(self, **kwargs):  # noqa: E501
        """x_fact_set_fundamentals_list_sectors_and_industries_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.x_fact_set_fundamentals_list_sectors_and_industries_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: SectorList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.x_fact_set_fundamentals_list_sectors_and_industries_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.x_fact_set_fundamentals_list_sectors_and_industries_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def x_fact_set_fundamentals_list_sectors_and_industries_get_with_http_info(self, **kwargs):  # noqa: E501
        """x_fact_set_fundamentals_list_sectors_and_industries_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.x_fact_set_fundamentals_list_sectors_and_industries_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: SectorList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method x_fact_set_fundamentals_list_sectors_and_industries_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/xFactSetFundamentals/ListSectorsAndIndustries', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SectorList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def x_fact_set_fundamentals_search_fundamentals_get(self, **kwargs):  # noqa: E501
        """x_fact_set_fundamentals_search_fundamentals_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.x_fact_set_fundamentals_search_fundamentals_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pattern:
        :return: FundamentalDescriptionList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.x_fact_set_fundamentals_search_fundamentals_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.x_fact_set_fundamentals_search_fundamentals_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def x_fact_set_fundamentals_search_fundamentals_get_with_http_info(self, **kwargs):  # noqa: E501
        """x_fact_set_fundamentals_search_fundamentals_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.x_fact_set_fundamentals_search_fundamentals_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pattern:
        :return: FundamentalDescriptionList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pattern']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method x_fact_set_fundamentals_search_fundamentals_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'pattern' in params:
            query_params.append(('Pattern', params['pattern']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/xFactSetFundamentals/SearchFundamentals', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FundamentalDescriptionList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
